"use strict";(self.webpackChunkuniversity_docs=self.webpackChunkuniversity_docs||[]).push([[3275],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return n?o.createElement(f,i(i({ref:t},u),{},{components:n})):o.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9283:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],c={id:"flutter12",title:"BottomNavigationBar"},l=void 0,s={unversionedId:"flutter/flutter12",id:"flutter/flutter12",title:"BottomNavigationBar",description:"Es un widget que se muestra en la parte inferior de la pantalla y nos permite seleccionar entre una cantidad de vistas, tipicamente son entre 3 y 5 vistas. El BottomNavigationBar est\xe1 conformado de m\xfaltiples items que pueden contener una etiqueta de texo, un \xedcono o ambos. Este componente provee una navegaci\xf3n r\xe1pida entre las vistas principales de una app.",source:"@site/docs/flutter/flutter12.md",sourceDirName:"flutter",slug:"/flutter/flutter12",permalink:"/cursos/docs/flutter/flutter12",tags:[],version:"current",frontMatter:{id:"flutter12",title:"BottomNavigationBar"},sidebar:"flutterSidebar",previous:{title:"Navegaci\xf3n - Parte 3",permalink:"/cursos/docs/flutter/flutter11"},next:{title:"ListView",permalink:"/cursos/docs/flutter/flutter13"}},u=[],p={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Es un widget que se muestra en la parte inferior de la pantalla y nos permite seleccionar entre una cantidad de vistas, tipicamente son entre 3 y 5 vistas. El BottomNavigationBar est\xe1 conformado de m\xfaltiples items que pueden contener una etiqueta de texo, un \xedcono o ambos. Este componente provee una navegaci\xf3n r\xe1pida entre las vistas principales de una app."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"class BottomNavigationScreen extends StatefulWidget {\n  const BottomNavigationScreen({Key? key}) : super(key: key);\n\n  @override\n  State<BottomNavigationScreen> createState() => _BottomNavigationState();\n}\n\nclass _BottomNavigationState extends State<BottomNavigationScreen> {\n\n  // controla el indice seleccinado para mostrar la vista correspondiente\n  int _indiceSeleccionado = 0;\n\n  static const TextStyle optionStyle =\n  TextStyle(fontSize: 30, fontWeight: FontWeight.bold);\n\n  // Lista de widgets que se van a mostrar\n  static const List<Widget> _opciones = <Widget>[\n    Text(\n      'P\xe1gina 1',\n      style: optionStyle,\n    ),\n    Text(\n      'P\xe1gina 2',\n      style: optionStyle,\n    ),\n    Text(\n      'P\xe1gina 3',\n      style: optionStyle,\n    ),\n  ];\n\n  void _onItemTapped(int index) {\n    setState(() {\n      _indiceSeleccionado = index;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('BottomNavigationBar ejemplo'),\n      ),\n      body: Center(\n        child: _opciones.elementAt(_indiceSeleccionado),\n      ),\n      bottomNavigationBar: BottomNavigationBar(\n        items: const <BottomNavigationBarItem>[\n          BottomNavigationBarItem(\n            icon: Icon(Icons.home),\n            label: 'P\xe1gina 1',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.business),\n            label: 'P\xe1gina 2',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.school),\n            label: 'P\xe1gina 3',\n          ),\n        ],\n        currentIndex: _indiceSeleccionado,\n        selectedItemColor: Colors.amber[800],\n        onTap: _onItemTapped,\n      ),\n    );\n  }\n}\n")))}d.isMDXComponent=!0}}]);