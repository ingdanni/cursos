"use strict";(self.webpackChunkuniversity_docs=self.webpackChunkuniversity_docs||[]).push([[7344],{3905:function(e,a,n){n.d(a,{Zo:function(){return p},kt:function(){return m}});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=t.createContext({}),s=function(e){var a=t.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},p=function(e){var a=s(e.components);return t.createElement(c.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?t.createElement(f,i(i({ref:a},p),{},{components:n})):t.createElement(f,i({ref:a},p))}));function m(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in a)hasOwnProperty.call(a,c)&&(l[c]=a[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8567:function(e,a,n){n.r(a),n.d(a,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var t=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"flutter2",title:"Introducci\xf3n"},c=void 0,s={unversionedId:"flutter/flutter2",id:"flutter/flutter2",title:"Introducci\xf3n",description:"Dart es un lenguaje de programaci\xf3n orientado a objetos, de prop\xf3sito general y de c\xf3digo abierto con sintaxis de estilo C desarrollado por Google en 2011. El prop\xf3sito inicial de Dart fue crear interafaces de usuario para la web y las aplicaciones m\xf3viles. Est\xe1 en desarrollo activo, compilado en c\xf3digo de m\xe1quina nativo para crear aplicaciones m\xf3viles, inspirado en otros lenguajes de programaci\xf3n como Java, JavaScript, C# y est\xe1 fuertemente tipado. Dado que Dart es un lenguaje compilado, no puede ejecutar su c\xf3digo directamente; en cambio, el compilador lo analiza y lo transfiere a c\xf3digo de m\xe1quina.",source:"@site/docs/flutter/flutter2.md",sourceDirName:"flutter",slug:"/flutter/flutter2",permalink:"/cursos/docs/flutter/flutter2",tags:[],version:"current",frontMatter:{id:"flutter2",title:"Introducci\xf3n"},sidebar:"flutterSidebar",previous:{title:"Introducci\xf3n a Flutter",permalink:"/cursos/docs/flutter/flutter1"},next:{title:"Introducci\xf3n - parte 2",permalink:"/cursos/docs/flutter/flutter3"}},p=[{value:"Variables",id:"variables",children:[],level:2},{value:"Constantes",id:"constantes",children:[],level:2},{value:"Tipos de datos",id:"tipos-de-datos",children:[{value:"String, int, double, bool",id:"string-int-double-bool",children:[],level:3},{value:"List",id:"list",children:[],level:3},{value:"Maps",id:"maps",children:[],level:3}],level:2},{value:"Funciones",id:"funciones",children:[],level:2},{value:"Ejercicio pr\xe1ctico",id:"ejercicio-pr\xe1ctico",children:[],level:2}],u={toc:p};function d(e){var a=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Dart es un lenguaje de programaci\xf3n orientado a objetos, de prop\xf3sito general y de c\xf3digo abierto con sintaxis de estilo C desarrollado por Google en 2011. El prop\xf3sito inicial de Dart fue crear interafaces de usuario para la web y las aplicaciones m\xf3viles. Est\xe1 en desarrollo activo, compilado en c\xf3digo de m\xe1quina nativo para crear aplicaciones m\xf3viles, inspirado en otros lenguajes de programaci\xf3n como Java, JavaScript, C# y est\xe1 fuertemente tipado. Dado que Dart es un lenguaje compilado, no puede ejecutar su c\xf3digo directamente; en cambio, el compilador lo analiza y lo transfiere a c\xf3digo de m\xe1quina."),(0,o.kt)("p",null,"Admite la mayor\xeda de los conceptos comunes de los lenguajes de programaci\xf3n como clases, interfaces, funciones, a diferencia de otros lenguajes de programaci\xf3n. El lenguaje Dart no admite matrices directamente. Admite la recopilaci\xf3n, que se utiliza para replicar la estructura de datos, como matrices, gen\xe9ricos y tipos opcionales."),(0,o.kt)("p",null,"Para ejecutar los ejemplos usaremos ",(0,o.kt)("a",{parentName:"p",href:"https://dartpad.dev"},"DartPad"),", un editor online para Dart."),(0,o.kt)("h2",{id:"variables"},"Variables"),(0,o.kt)("p",null,"Se declaran usando la palabre reservada ",(0,o.kt)("inlineCode",{parentName:"p"},"var"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"var nombre = 'Carlos';\n")),(0,o.kt)("p",null,"Otra opcion es especificar el tipo de dato explicitamente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"String nombre = 'Carlos';\n")),(0,o.kt)("h2",{id:"constantes"},"Constantes"),(0,o.kt)("p",null,"Se pueden usar las palabras reservadas ",(0,o.kt)("inlineCode",{parentName:"p"},"final")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"const")," para declarar una constante:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final nombre = 'Mario';\nfinal String apellido = 'Perez';\n\nconst pi = 3.14159;\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"La principal diferencia es que se usa ",(0,o.kt)("inlineCode",{parentName:"p"},"final")," en vez de ",(0,o.kt)("inlineCode",{parentName:"p"},"const")," si no conocemos el valor en tiempo de compilaci\xf3n y este ser\xe1 calculado en tiempo de ejecuci\xf3n.")),(0,o.kt)("h2",{id:"tipos-de-datos"},"Tipos de datos"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Numbers (int, double)"),(0,o.kt)("li",{parentName:"ul"},"Strings (String)"),(0,o.kt)("li",{parentName:"ul"},"Booleans (bool)"),(0,o.kt)("li",{parentName:"ul"},"Lists (List, tambi\xe9n se conoce como arreglo)"),(0,o.kt)("li",{parentName:"ul"},"Sets (Set)"),(0,o.kt)("li",{parentName:"ul"},"Maps (Map)")),(0,o.kt)("p",null,"Algunos otros tipos tambi\xe9n tienen roles especiales en el lenguaje ",(0,o.kt)("strong",{parentName:"p"},"Dart"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Object"),": La superclase de todas las clases de Dart excepto Null.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Future y Stream"),": se utilizan en la funcionalidades con asincron\xeda.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Iterable"),": se utiliza en bucles for-in y en funciones de generador s\xedncrono.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Never"),": indica que una expresi\xf3n nunca puede terminar de evaluarse correctamente. Se usa con mayor frecuencia para funciones que siempre lanzan una excepci\xf3n.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"dynamic"),": indica que desea deshabilitar la verificaci\xf3n est\xe1tica.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"void"),": Indica que un valor nunca se utiliza. A menudo se utiliza como un tipo de devoluci\xf3n."))),(0,o.kt)("h3",{id:"string-int-double-bool"},"String, int, double, bool"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"String nombre = 'Francisco';\n\n// String con doble comilla\nString apellido = \"Fernandez\";\n\nint edad = 20;\n\ndouble calificacion = 33.33;\n\nbool aprobado = false;\n\nprint(nombre);\nprint(apellido);\nprint(edad);\nprint(calificacion);\nprint(aprobado);\n")),(0,o.kt)("h3",{id:"list"},"List"),(0,o.kt)("p",null,"Son tambi\xe9n conocidos como arreglos:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"var lista = [1, 2, 3, 4];\n\nprint(lista.length); // imprime longitud de la lista\n")),(0,o.kt)("p",null,"Tambien se puede especificar el tipo de dato de la lista:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"List<int> lista = [1, 2, 3, 4];\n")),(0,o.kt)("p",null,"Para crear una lista que es constante, agregamos ",(0,o.kt)("inlineCode",{parentName:"p"},"const")," antes de los valores:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"List<int> lista = const [1, 2, 3, 4];\n")),(0,o.kt)("h3",{id:"maps"},"Maps"),(0,o.kt)("p",null,"En general, un ",(0,o.kt)("inlineCode",{parentName:"p"},"map")," es un objeto que asocia claves y valores. Tanto las claves como los valores pueden ser cualquier tipo de objeto. Cada clave aparece solo una vez, pero puede usar el mismo valor varias veces."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"var persona = {\n  // llave:    valor\n  'nombre': 'Pedro',\n  'apellido': 'Fernandezs',\n  'direccion': 'alguna direccion...'\n};\n\n// tambien se puede declarar usando el constructor Map\n\nvar persona = Map<String, String>();\n\n// se puede agregar valores de la siguiente forma\npersona['nombre'] = 'Pedro';\n")),(0,o.kt)("p",null,"Se puede definir como constante:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final alumnos = const {\n  1: 'Maria',\n  2: 'Juana',\n  3: 'Mercedes',\n};\n\n// error al compilar\nalumnos[1] = 'Jose';\n")),(0,o.kt)("h2",{id:"funciones"},"Funciones"),(0,o.kt)("p",null,"Las funciones en Dart son objectos y tienen un tipo de dato. Esto quiere decir que se pueden pasar como parametro a otra funci\xf3n o se pueden asignar a una variable."),(0,o.kt)("p",null,"Se definen usando la nomenclatura:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"// tipo de retorno + nombre\nString saludar(/* parametros: Tipo + nombre */) {\n  // cuerpo\n  return val // valor de retorno\n}\n")),(0,o.kt)("p",null,"Ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},'String saludar(String nombre) {\n  return "Hola $nombre"; // concatenacion de Strings\n}\n')),(0,o.kt)("h2",{id:"ejercicio-pr\xe1ctico"},"Ejercicio pr\xe1ctico"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Crear una funci\xf3n que reciba un n\xfamero ",(0,o.kt)("inlineCode",{parentName:"p"},"double")," y retorne el valor elevado al cubo.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Crear una funci\xf3n que reciba un n\xfamero ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," y evalue si es negativo o positivo.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Explicar cual es el error en el siguiente c\xf3digo:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"Map<String, String> estudiante = {\n  'nombre': 'Alex',\n  'edad': 10,\n};\n\nprint(estudiante);\n")))))}d.isMDXComponent=!0}}]);