"use strict";(self.webpackChunkuniversity_docs=self.webpackChunkuniversity_docs||[]).push([[7373],{3905:function(e,n,a){a.d(n,{Zo:function(){return c},kt:function(){return m}});var r=a(7294);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function t(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?t(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,r,l=function(e,n){if(null==e)return{};var a,r,l={},t=Object.keys(e);for(r=0;r<t.length;r++)a=t[r],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)a=t[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=r.createContext({}),p=function(e){var n=r.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var a=e.components,l=e.mdxType,t=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(a),m=l,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||t;return a?r.createElement(k,i(i({ref:n},c),{},{components:a})):r.createElement(k,i({ref:n},c))}));function m(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var t=a.length,i=new Array(t);i[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var p=2;p<t;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9609:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var r=a(7462),l=a(3366),t=(a(7294),a(3905)),i=["components"],o={id:"android3",title:"Lenguaje de programaci\xf3n kotlin"},s=void 0,p={unversionedId:"android/android3",id:"android/android3",title:"Lenguaje de programaci\xf3n kotlin",description:"Para esta sesi\xf3n se pueden ejecutar los ejemplos de c\xf3digo en el Playgorund de Kotlin",source:"@site/docs/android/android3.md",sourceDirName:"android",slug:"/android/android3",permalink:"/cursos/docs/android/android3",tags:[],version:"current",frontMatter:{id:"android3",title:"Lenguaje de programaci\xf3n kotlin"},sidebar:"androidSidebar",previous:{title:"Introducci\xf3n a S.O. m\xf3viles",permalink:"/cursos/docs/android/android2"},next:{title:"Android Studio",permalink:"/cursos/docs/android/android4"}},c=[{value:"Funci\xf3n main",id:"funci\xf3n-main",children:[],level:2},{value:"Imprimir valores en la salida estandar",id:"imprimir-valores-en-la-salida-estandar",children:[],level:2},{value:"Variables",id:"variables",children:[],level:2},{value:"Tipos de datos",id:"tipos-de-datos",children:[],level:2},{value:"Arreglos",id:"arreglos",children:[],level:2},{value:"Condicionales if-else",id:"condicionales-if-else",children:[],level:2},{value:"Sentencia When",id:"sentencia-when",children:[],level:2},{value:"Funciones",id:"funciones",children:[{value:"Par\xe1metros predeterminados",id:"par\xe1metros-predeterminados",children:[],level:3},{value:"Parametros nombrados",id:"parametros-nombrados",children:[],level:3},{value:"Funciones de expresi\xf3n \xfanica",id:"funciones-de-expresi\xf3n-\xfanica",children:[],level:3},{value:"Funciones gen\xe9ricas",id:"funciones-gen\xe9ricas",children:[],level:3}],level:2},{value:"Ciclos",id:"ciclos",children:[{value:"Ciclo for",id:"ciclo-for",children:[],level:3},{value:"Ciclos while",id:"ciclos-while",children:[],level:3}],level:2},{value:"Clases",id:"clases",children:[{value:"Constructores",id:"constructores",children:[],level:3},{value:"Init",id:"init",children:[],level:3},{value:"Constructores secundarios",id:"constructores-secundarios",children:[],level:3}],level:2}],d={toc:c};function u(e){var n=e.components,a=(0,l.Z)(e,i);return(0,t.kt)("wrapper",(0,r.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"Para esta sesi\xf3n se pueden ejecutar los ejemplos de c\xf3digo en el ",(0,t.kt)("a",{parentName:"p",href:"https://play.kotlinlang.org/"},"Playgorund de Kotlin")),(0,t.kt)("h2",{id:"funci\xf3n-main"},"Funci\xf3n main"),(0,t.kt)("p",null,"La funci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"main")," es el punto de entrada a cualquier programa hecho en Kotlin."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun main() {\n  println("Hello world")\n}\n')),(0,t.kt)("h2",{id:"imprimir-valores-en-la-salida-estandar"},"Imprimir valores en la salida estandar"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'\n// Imprime un valor\nprint("Hello world")\n\n// println imprime y agrega un salto de linea al final\n\nprintln("Hello")\nprintln("world")\n\n')),(0,t.kt)("h2",{id:"variables"},"Variables"),(0,t.kt)("p",null,"Variables de solo lectura usan la palabra reservada ",(0,t.kt)("inlineCode",{parentName:"p"},"val"),". Solo pueden ser asignadas una sola vez."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},"val a: Int = 1\nval b = 2 // el tipo Int es inferido\n\n// Se declara y luego se inicializa\nval c: Int\nc = 3\n")),(0,t.kt)("p",null,"Variables que pueden ser reasignadas (su valor cambia) usan la palabra reservada ",(0,t.kt)("inlineCode",{parentName:"p"},"var"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},"var x = 5\nx += 1\n\nvar y = 10\ny = 10 + 5\n")),(0,t.kt)("h2",{id:"tipos-de-datos"},"Tipos de datos"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Enteros"),": se especifican con la palabra reservada ",(0,t.kt)("inlineCode",{parentName:"p"},"Int")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},"val one: Int = 1\n")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Flotante"),": se especifican con la palabra reservada ",(0,t.kt)("inlineCode",{parentName:"p"},"Double"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},"val pi: Double = 3.1416\n")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Booleano"),": se especifican con la palabra reservada ",(0,t.kt)("inlineCode",{parentName:"p"},"Boolean"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},"var isStudent: Boolean = true\n")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Caracteres"),": Se representan con la palabra reservada ",(0,t.kt)("inlineCode",{parentName:"p"},"Char")," y van dentro de comilla simple."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},"val a: Char = 'a'\n")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Cadenas"),": Se representan con la palabra reserva ",(0,t.kt)("inlineCode",{parentName:"p"},"String")," y van dentro de comillas doble."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'val name: String = "Roberto Gomez"\n\n// String con salto de linea\nval s = "Hello world!\\n"\n\n// String con varias lineas\nval code = """\n    for (c in "foo")\n        print(c)\n"""\n')),(0,t.kt)("p",null,"String templates: una cadena puede contener valores concatenados."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'val i = 10\nprintln("i = $i")\n// Imprime "i = 10"\n')),(0,t.kt)("p",null,"o podemos utilizar llaves ",(0,t.kt)("inlineCode",{parentName:"p"},"{}"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'val s = "abc"\n\nprintln("La longitud de $s es ${s.length}")\n// Imprime: La longitud de abc es 3\n')),(0,t.kt)("h2",{id:"arreglos"},"Arreglos"),(0,t.kt)("p",null,"Se definen con la palabra reservada ",(0,t.kt)("inlineCode",{parentName:"p"},"Array")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'var array: Array<Int> = arrayOf(0, 1, 2, 3, 4)\n\nprintln("Longitud de array: ${array.count()}")\n\nfor (i in 0 until array.count()) {\n    println(array[i])\n}\n\n/*\nLongitud de array: 5\n0\n1\n2\n3\n4\n*/\n')),(0,t.kt)("h2",{id:"condicionales-if-else"},"Condicionales if-else"),(0,t.kt)("p",null,"Para evaluar condiciones podemos usar ",(0,t.kt)("inlineCode",{parentName:"p"},"if")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"else"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'val points = 61\n\nif (points >= 60) {\n    print("Aprobado!! \ud83c\udf7b")\n} else {\n    print("Ha reprobado. Gracias!")    \n}\n')),(0,t.kt)("h2",{id:"sentencia-when"},"Sentencia When"),(0,t.kt)("p",null,"Sirve para evaluar en diferentes variantes. Es el equivalente a ",(0,t.kt)("inlineCode",{parentName:"p"},"switch")," en otros lenguajes."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'val points = 101\n\n// evaluamos rangos con \'in\'\n\nwhen (points) {\n  in 90..100 -> print("Excelente")\n  in 80..89 -> print("Muy bueno")\n  in 70..79 -> print("Bueno")\n  in 60..69 -> print("Malo")\n  in 0..59 -> print("Reprobado")\n  else -> print("Indefinido")\n}\n\nval platform = "Android"\n\n// evaluamos el valor directamente\n\nwhen (platform) {\n  "iOS" -> println("Usamos Swift")\n  "Android" -> println("Usamos Kotlin")\n  "Flutter" -> println("Usamos Dart")\n  "React Native" -> println("Usamos Javascript")\n  else -> println("No s\xe9 que usar")\n}\n\n// evaluamos un condicional (como un reemplazo de if, else)\n\nwhen {\n  platform == "iOS" -> println("Usamos Swift")\n  platform == "Android" -> println("Usamos Kotlin")\n  platform == "Flutter" -> println("Usamos Dart")\n  platform == "React Native" -> println("Usamos Javascript")\n  else -> print("No s\xe9 que usar")\n}\n')),(0,t.kt)("h2",{id:"funciones"},"Funciones"),(0,t.kt)("p",null,"Se declaran con la palabra reservada ",(0,t.kt)("inlineCode",{parentName:"p"},"fun"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},"\nfun double(x: Int): Int {\n  return 2 * x\n}\n\n")),(0,t.kt)("p",null,"Los parametros se agregan especificando el ",(0,t.kt)("inlineCode",{parentName:"p"},"nombre"),": ",(0,t.kt)("inlineCode",{parentName:"p"},"tipo")," y cuando hay mas de un parametro se separan por comas:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},"\nfun sum(a: Int, b: Int): Int {\n  return a + b\n}\n\nval result = sum(1, 2)\n")),(0,t.kt)("h3",{id:"par\xe1metros-predeterminados"},"Par\xe1metros predeterminados"),(0,t.kt)("p",null,"Se agrega un valor predeterminado usando ",(0,t.kt)("inlineCode",{parentName:"p"},"=")," despues del tipo de dato."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun sendMessage(message: String = "Hello world") {\n    println(message)\n}\n\nsendMessage() // imprime "Hello world"\n\nsendMessage("Hola mundo") // imprime "Hola mundo"\n\n')),(0,t.kt)("h3",{id:"parametros-nombrados"},"Parametros nombrados"),(0,t.kt)("p",null,"Al llamar una funci\xf3n se puede especificar el nombre de cada par\xe1metro, exactamente igual a la definici\xf3n de la funci\xf3n. De esta forma nos ayuda a tener nuestro c\xf3digo legible cuando tenemos varios par\xe1metros en una funci\xf3n."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun main() {\n    sendMessage()\n    sendMessage(title = "Alert", message = "this is a message")\n    sendMessage(message = "This is a message")\n    sendMessage(title = "Error")\n    sendMessage(title = "Error", "This is a message")\n    sendMessage("title", "message")\n}\n\nfun sendMessage(title: String = "Alert", message: String = "Hello world") {\n    println(title)\n    println(message)\n}\n\n')),(0,t.kt)("h3",{id:"funciones-de-expresi\xf3n-\xfanica"},"Funciones de expresi\xf3n \xfanica"),(0,t.kt)("p",null,"Se pueden omitir las llaves ",(0,t.kt)("inlineCode",{parentName:"p"},"{}")," en el cuerpo de la funcion cuando esta solo retorna una expresi\xf3n simple. Agregando el cuerpo despues del s\xedmbolo ",(0,t.kt)("inlineCode",{parentName:"p"},"="),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun main() {\n    println(double(2))\n    println(sum(2, 5))\n}\n\nfun double(x: Int): Int = x * 2\n\nfun sum(a: Int, b: Int) = a + b\n\n")),(0,t.kt)("h3",{id:"funciones-gen\xe9ricas"},"Funciones gen\xe9ricas"),(0,t.kt)("p",null,"Pueden tener par\xe1metros gen\xe9ricos, que se especifican entre ",(0,t.kt)("inlineCode",{parentName:"p"},"<>")," antes del nombre de la funci\xf3n:"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"fun <T> functionName(parameter: T)")),(0,t.kt)("p",null,"Por ejemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun main() {\n    printValue(1)\n    printValue("abc")\n    printValue(5.0)\n    printValue(false)\n    printValue<Boolean>(true)\n    printValue<Int>(100)\n}\n\nfun <T> printValue(a: T) {\n    println("El valor de a es $a")\n}\n\n/*\nEl valor de a es 1\nEl valor de a es abc\nEl valor de a es 5.0\nEl valor de a es false\nEl valor de a es true\nEl valor de a es 100\n*/\n\n')),(0,t.kt)("h2",{id:"ciclos"},"Ciclos"),(0,t.kt)("h3",{id:"ciclo-for"},"Ciclo for"),(0,t.kt)("p",null,"El ciclo ",(0,t.kt)("inlineCode",{parentName:"p"},"for"),"itera sobre cualquier elemento que array."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},"var collection: Array<Int> = arrayOf(1, 2, 3)\n\nfor (item in collection) {\n    println(item)\n}\n")),(0,t.kt)("p",null,"Itera sobre un rango de n\xfameros:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},"for (i in 1..10) {\n    println(i)\n}\n\n// i inicia en 10 baja hasta 0 y se disminuye en 2 cada iteraci\xf3n\nfor (i in 10 downTo 0 step 2) {\n    println(i)\n}\n\n// i inicia en 0 sube hasta 10 y se incrementa en 2 cada iteraci\xf3n\nfor (i in 0 until 10 step 2) {\n    println(i)\n}\n")),(0,t.kt)("p",null,"Itera sobre los indices de un arreglo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},"var collection: Array<Int> = arrayOf(10, 20, 30)\n\nfor (index in collection.indices) {\n    println(collection[index])\n}\n")),(0,t.kt)("p",null,"Alternativamente podemos usar la funci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"withIndex()"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'var collection: Array<Int> = arrayOf(10, 20, 30)\n\nfor ((index, value) in collection.withIndex()) {\n    println("Indice: $index, valor: $value")\n}\n')),(0,t.kt)("h3",{id:"ciclos-while"},"Ciclos while"),(0,t.kt)("p",null,"Existe 2 variantes ",(0,t.kt)("inlineCode",{parentName:"p"},"while")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"do while"),":"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"while"),": valida la condici\xf3n, si es ",(0,t.kt)("inlineCode",{parentName:"li"},"true")," ejecuta el cuerpo.")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},"var x = 10\n\nwhile (x > 0) {\n    println(x)\n    x--\n}\n\n")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"do while"),": ejecuta el cuerpo y luego valida la condici\xf3n. Siempre se ejecuta al menos una vez.")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},"var x = 10\n\ndo {\n  println(x)\n  x--\n} while (x > 0)\n")),(0,t.kt)("h2",{id:"clases"},"Clases"),(0,t.kt)("p",null,"Una clase se declara con la palabra reservada ",(0,t.kt)("inlineCode",{parentName:"p"},"class"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},"class Person {\n\n}\n")),(0,t.kt)("h3",{id:"constructores"},"Constructores"),(0,t.kt)("p",null,"Los constructores son un tipo de funci\xf3n que nos ayuda a inicializar las propiedades de una clase."),(0,t.kt)("p",null,"Una clase puede tener un constructor primario y uno o varios constructores secundarios. El primario se define en el encabezado despu\xe9s del nombre de la clase."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Person constructor(val name: String)\n\nval person = Person("Mark")\n\nprintln(person.name)\n\n// Mark\n')),(0,t.kt)("p",null,"Tambi\xe9n podemos omitir la palabra reservada ",(0,t.kt)("inlineCode",{parentName:"p"},"constructor"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Pet (val name: String)\n\nvar pet = Pet("Rocky")\n\nprintln(pet.name)\n// Rocky\n')),(0,t.kt)("p",null,"Las propiedades en el constructor pueden ser diferentes a las propiedades de la clase:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Person(name: String) {\n    val fullname: String = name.uppercase()\n}\n\nval person = Person("Mark Twain")    \n\nprintln(person.fullname)\n// MARK TWAIN\n\nprintln(person.name) // nos marca error, solamente se usa en el constructor.\n')),(0,t.kt)("p",null,"Cuando tenemos varias propiedades en una clase, separamos por coma cada una en el constructor. Tambien podemos asignar valores por defectos a las propiedades:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Person(\n    val name: String,\n    val lastname: String,\n    val age: Int = 0,\n)\n\nval mark = Person("Mark", "Twain", 30)\n\nvar jeff = Person("Jeff", "Bezos")\n\nprintln(mark.name)\nprintln(mark.lastname)\nprintln(mark.age)\n\nprintln(jeff.name)\nprintln(jeff.lastname)\nprintln(jeff.age)\n\n/*\nMark\nTwain\n30\n\nJeff\nBezos\n0\n*/\n')),(0,t.kt)("h3",{id:"init"},"Init"),(0,t.kt)("p",null,"Las propiedades tambi\xe9n pueden inicializarse en bloques ",(0,t.kt)("inlineCode",{parentName:"p"},"init"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Person(\n    name: String,\n    lastname: String,\n    _age: Int = 0,\n) {\n\n    val fullname: String\n    val age: Int\n\n    init {\n        fullname = "$name $lastname".uppercase()\n        age = _age\n\n        println("Init: se inicializa con name = $name y age = $_age")\n    }\n}\n')),(0,t.kt)("h3",{id:"constructores-secundarios"},"Constructores secundarios"),(0,t.kt)("p",null,"Una clase puede tener constructores secundarios, se declaran con el prefijo ",(0,t.kt)("inlineCode",{parentName:"p"},"constructor"),"."),(0,t.kt)("p",null,"Cada constructor secundario necesita delegar en el constructor primario, ya sea directa o indirectamente a trav\xe9s de otro (s) constructor (es) secundario (s). La delegaci\xf3n a otro constructor de la misma clase se realiza mediante la palabra clave ",(0,t.kt)("inlineCode",{parentName:"p"},"this"),"."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Login(var name: String, var password: String) {\n\n    var token: String = ""\n\n    constructor(_name: String, _password: String, _token: String) : this(_name, _password) {\n        this.token = _token\n    }\n}\n')))}u.isMDXComponent=!0}}]);