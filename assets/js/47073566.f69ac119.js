"use strict";(self.webpackChunkuniversity_docs=self.webpackChunkuniversity_docs||[]).push([[5315],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),s=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(a),m=r,g=p["".concat(d,".").concat(m)]||p[m]||u[m]||i;return a?n.createElement(g,o(o({ref:t},c),{},{components:a})):n.createElement(g,o({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=p;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},9246:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),o=["components"],l={id:"android16",title:"RecyclerViews"},d=void 0,s={unversionedId:"android/android16",id:"android/android16",title:"RecyclerViews",description:"Inicio",source:"@site/docs/android/android16.md",sourceDirName:"android",slug:"/android/android16",permalink:"/cursos/docs/android/android16",tags:[],version:"current",frontMatter:{id:"android16",title:"RecyclerViews"}},c=[{value:"Inicio",id:"inicio",children:[],level:2},{value:"Definici\xf3n",id:"definici\xf3n",children:[],level:2},{value:"Agregar clase Estudiante",id:"agregar-clase-estudiante",children:[],level:2},{value:"Agregar el layout",id:"agregar-el-layout",children:[],level:2},{value:"Agregar clase ViewHolder",id:"agregar-clase-viewholder",children:[],level:2},{value:"Agregar clase Adapter",id:"agregar-clase-adapter",children:[],level:2},{value:"Configurar el Adapter",id:"configurar-el-adapter",children:[],level:2},{value:"Configurar Activity",id:"configurar-activity",children:[],level:2}],u={toc:c};function p(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"inicio"},"Inicio"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Para esta secci\xf3n vamos a crear un proyecto nuevo con una actividad vac\xeda (Empty activity).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Luego en nuestro paquete principal agregamos 3 archivos ",(0,i.kt)("strong",{parentName:"p"},"kotlin")," uno llamado ",(0,i.kt)("strong",{parentName:"p"},"Estudiante.kt"),", otro llamado ",(0,i.kt)("strong",{parentName:"p"},"EstudiantesAdapter.kt")," y para finalizar otro llamado ",(0,i.kt)("strong",{parentName:"p"},"EstudiantesViewHolder.kt"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Por \xfaltimo en nuestra carpeta ",(0,i.kt)("strong",{parentName:"p"},"layout")," agregamos un archivo XML nuevo. Clic derecho en ",(0,i.kt)("inlineCode",{parentName:"p"},"nuevo > XML > archivo de layout XML")," y lo nombramos ",(0,i.kt)("strong",{parentName:"p"},"estudiante_row_item.xml")))),(0,i.kt)("h2",{id:"definici\xf3n"},"Definici\xf3n"),(0,i.kt)("p",null,"El componente ",(0,i.kt)("strong",{parentName:"p"},"RecyclerView")," facilita la visualizaci\xf3n eficiente de grandes conjuntos de datos. Usted proporciona los datos y define el aspecto de cada elemento, y la biblioteca RecyclerView crea din\xe1micamente los elementos cuando se necesitan."),(0,i.kt)("p",null,"Como su nombre lo indica, ",(0,i.kt)("strong",{parentName:"p"},"RecyclerView")," recicla esos elementos individuales. Cuando un elemento se desplaza fuera de la pantalla, ",(0,i.kt)("strong",{parentName:"p"},"RecyclerView")," no destruye su vista. En su lugar, ",(0,i.kt)("strong",{parentName:"p"},"RecyclerView")," reutiliza la vista para los elementos nuevos que se han desplazado en pantalla. Esta reutilizaci\xf3n mejora enormemente el rendimiento, mejorando la capacidad de respuesta de su aplicaci\xf3n y reduciendo el consumo de energ\xeda."),(0,i.kt)("h2",{id:"agregar-clase-estudiante"},"Agregar clase Estudiante"),(0,i.kt)("p",null,"Vamos a definir una clase llamada Estudiante en el archivo ",(0,i.kt)("strong",{parentName:"p"},"Estudiante.kt"),". Se marca como una ",(0,i.kt)("inlineCode",{parentName:"p"},"data class")," ya que el objetivo de esta clase es almacenar datos."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"data class Estudiante (\n    val id: Int,\n    val nombre: String,\n    val carne: String,\n    val telefono: String,\n)\n")),(0,i.kt)("p",null,"Por debajo de la clase podemos agregar una funci\xf3n global que nos retorne una lista de estudiantes para simular un dataset que usaremos para poblar nuestro ",(0,i.kt)("strong",{parentName:"p"},"RecyclerView"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun obtenerListaDeEstudiantes(): List<Estudiante> {\n\n    return listOf(\n        Estudiante(1, "Juana Perez", "001-002", telefono = "88996655"),\n        Estudiante(2, "Marcos Perez", "001-896", telefono = "88996655"),\n        Estudiante(3, "Juliana Perez", "001-325", telefono = "88996655"),\n        Estudiante(4, "Maria Perez", "001-987", telefono = "88996655"),\n        Estudiante(5, "Josefina Perez", "001-333", telefono = "88996655"),\n    )\n}\n')),(0,i.kt)("h2",{id:"agregar-el-layout"},"Agregar el layout"),(0,i.kt)("p",null,"En el archivo ",(0,i.kt)("strong",{parentName:"p"},"estudiante_row_item.xml")," agregamos el siguiente layout que contiene un LinearLayout y 3 etiquetas de tipo ",(0,i.kt)("inlineCode",{parentName:"p"},"TextView")," con sus configuraciones correspondientes. Este layout se utilizar\xe1 para cada celda de nuestra lista en el ",(0,i.kt)("strong",{parentName:"p"},"RecyclerView"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="utf-8"?>\n<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    android:orientation="vertical"\n    android:layout_marginTop="20dp"\n    android:layout_marginLeft="20dp"\n    android:layout_marginRight="20dp"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content">\n    <TextView\n        android:id="@+id/nombre_textView"\n        android:textSize="22dp"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Nombre Estudiante"/>\n\n    <TextView\n        android:id="@+id/carne_textView"\n        android:textSize="18dp"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Carne"/>\n\n    <TextView\n        android:id="@+id/telefono_textView"\n        android:textSize="18dp"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Telefono"/>\n</LinearLayout>\n')),(0,i.kt)("h2",{id:"agregar-clase-viewholder"},"Agregar clase ViewHolder"),(0,i.kt)("p",null,"En el archivo ",(0,i.kt)("strong",{parentName:"p"},"EstudiantesViewHolder.kt")," vamos a crear una clase que represente nuestro ",(0,i.kt)("strong",{parentName:"p"},"ViewHolder"),"."),(0,i.kt)("p",null,"Cada elemento individual de la lista est\xe1 definido por un objeto ",(0,i.kt)("strong",{parentName:"p"},"ViewHolder"),". Cuando se crea el ",(0,i.kt)("strong",{parentName:"p"},"ViewHolder"),", no tiene ning\xfan dato asociado. Una vez que se crea el ",(0,i.kt)("strong",{parentName:"p"},"ViewHolder"),", RecyclerView lo vincula a sus datos. El ",(0,i.kt)("strong",{parentName:"p"},"ViewHolder")," se define extendiendo ",(0,i.kt)("strong",{parentName:"p"},"RecyclerView.ViewHolder"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class EstudiantesViewHolder(view: View) : RecyclerView.ViewHolder(view) {\n    val nombreTextView: TextView\n    val carneTextView: TextView\n    val telefonoTextView: TextView\n\n    init {\n        nombreTextView = view.findViewById(R.id.nombre_textView)\n        carneTextView = view.findViewById(R.id.carne_textView)\n        telefonoTextView = view.findViewById(R.id.telefono_textView)\n    }\n}\n")),(0,i.kt)("h2",{id:"agregar-clase-adapter"},"Agregar clase Adapter"),(0,i.kt)("p",null,"En el archivo ",(0,i.kt)("strong",{parentName:"p"},"EstudiantesAdapter.kt")," vamos a crear una clase que represente nuestro ",(0,i.kt)("strong",{parentName:"p"},"Adapter"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"RecyclerView")," solicita las vistas y vincula las vistas a sus datos llamando a m\xe9todos en el ",(0,i.kt)("strong",{parentName:"p"},"Adapter"),". El adaptador se define extendiendo ",(0,i.kt)("strong",{parentName:"p"},"RecyclerView.Adapter"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class EstudiantesAdapter(private val dataSet: Array<Estudiante>) : RecyclerView.Adapter<EstudiantesViewHolder>() {\n\n}\n")),(0,i.kt)("h2",{id:"configurar-el-adapter"},"Configurar el Adapter"),(0,i.kt)("p",null,"Dentro de nuestro Adapter vamos a definir 3 funciones que nos ayudar\xe1n a mostrar los datos en pantalla."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"La primera es ",(0,i.kt)("inlineCode",{parentName:"li"},"onCreateViewHolder"),", esta se encarga de crear nuevas vistas y es invocada por el ",(0,i.kt)("inlineCode",{parentName:"li"},"layout manager")," y nos retorna un ",(0,i.kt)("inlineCode",{parentName:"li"},"ViewHolder"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"\noverride fun onCreateViewHolder(viewGroup: ViewGroup, viewType: Int): EstudiantesViewHolder {\n\n    val view = LayoutInflater.from(viewGroup.context)\n        .inflate(R.layout.estudiante_row_item, viewGroup, false)\n\n    return EstudiantesViewHolder(view)\n}\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"La segunda es ",(0,i.kt)("inlineCode",{parentName:"li"},"onBindViewHolder")," que define el contenido de la vista, obtiene el elemento desde el dataset en la posici\xf3n actual y asigna el contenido del elemento a la vista:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"override fun onBindViewHolder(viewHolder: EstudiantesViewHolder, position: Int) {\n    viewHolder.nombreTextView.text = dataSet[position].nombre\n    viewHolder.carneTextView.text = dataSet[position].carne\n    viewHolder.telefonoTextView.text = dataSet[position].telefono\n}\n")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"La tercera es ",(0,i.kt)("inlineCode",{parentName:"li"},"getItemCount")," y define el tama\xf1o del dataset.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"override fun getItemCount(): Int {\n    return dataSet.size\n}\n")),(0,i.kt)("h2",{id:"configurar-activity"},"Configurar Activity"),(0,i.kt)("p",null,"Por \xfaltimo vamos a configurar nuestro ",(0,i.kt)("strong",{parentName:"p"},"RecyclerView")," y ",(0,i.kt)("strong",{parentName:"p"},"Adapter")," en nuestra activity para mostrar los datos."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"En nuestro archivo ",(0,i.kt)("strong",{parentName:"li"},"activity_main.xml")," agregamos un ",(0,i.kt)("strong",{parentName:"li"},"RecyclerView")," quedando de la siguiente forma:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<androidx.recyclerview.widget.RecyclerView\n        android:id="@+id/recycler_view"\n        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent" />\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"En la clase ",(0,i.kt)("strong",{parentName:"li"},"MainActivity")," dentro de la funci\xf3n ",(0,i.kt)("strong",{parentName:"li"},"onCreate")," agregamos:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val adapter = EstudiantesAdapter(dataSet = obtenerListaDeEstudiantes().toTypedArray())\n\nvar recyclerView: RecyclerView = findViewById(R.id.recycler_view)\n\nrecyclerView.adapter = adapter\n")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Ejecutamos el proyecto y debemos ver una lista de Estudiantes en la pantalla.")))}p.isMDXComponent=!0}}]);