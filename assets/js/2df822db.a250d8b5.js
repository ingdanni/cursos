"use strict";(self.webpackChunkuniversity_docs=self.webpackChunkuniversity_docs||[]).push([[4061],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(t),m=r,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return t?a.createElement(k,l(l({ref:n},p),{},{components:t})):a.createElement(k,l({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3883:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),l=["components"],o={id:"flutter14",title:"Peticiones HTTP en Flutter"},s=void 0,u={unversionedId:"flutter/flutter14",id:"flutter/flutter14",title:"Peticiones HTTP en Flutter",description:"Contenido",source:"@site/docs/flutter/flutter14.md",sourceDirName:"flutter",slug:"/flutter/flutter14",permalink:"/cursos/docs/flutter/flutter14",tags:[],version:"current",frontMatter:{id:"flutter14",title:"Peticiones HTTP en Flutter"},sidebar:"flutterSidebar",previous:{title:"ListView",permalink:"/cursos/docs/flutter/flutter13"},next:{title:"Formularios",permalink:"/cursos/docs/flutter/flutter15"}},p=[{value:"Contenido",id:"contenido",children:[],level:2},{value:"Programaci\xf3n As\xedncrona",id:"programaci\xf3n-as\xedncrona",children:[{value:"Futures",id:"futures",children:[],level:3},{value:"Async y Await",id:"async-y-await",children:[],level:3}],level:2},{value:"Agregar paquete http",id:"agregar-paquete-http",children:[],level:2},{value:"Crear clase User",id:"crear-clase-user",children:[],level:2},{value:"Lista de usuarios",id:"lista-de-usuarios",children:[],level:2},{value:"Hacer una petici\xf3n http",id:"hacer-una-petici\xf3n-http",children:[],level:2},{value:"Future Builder",id:"future-builder",children:[],level:2},{value:"Resultado final",id:"resultado-final",children:[],level:2},{value:"Ejercicio pr\xe1ctico",id:"ejercicio-pr\xe1ctico",children:[],level:2}],c={toc:p};function d(e){var n=e.components,o=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"contenido"},"Contenido"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Agregar el paquete ",(0,i.kt)("inlineCode",{parentName:"li"},"http"),"."),(0,i.kt)("li",{parentName:"ol"},"Crear una clase ",(0,i.kt)("inlineCode",{parentName:"li"},"User"),"."),(0,i.kt)("li",{parentName:"ol"},"Hacer una petici\xf3n http de tipo ",(0,i.kt)("inlineCode",{parentName:"li"},"GET"),"."),(0,i.kt)("li",{parentName:"ol"},"Convertir los datos en JSON a una lista de tipo ",(0,i.kt)("inlineCode",{parentName:"li"},"User"),"."),(0,i.kt)("li",{parentName:"ol"},"Mostrar los datos obtenidos en un ",(0,i.kt)("inlineCode",{parentName:"li"},"ListView"),".")),(0,i.kt)("h2",{id:"programaci\xf3n-as\xedncrona"},"Programaci\xf3n As\xedncrona"),(0,i.kt)("h3",{id:"futures"},"Futures"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Future")," es una clase que representa el resultado de una operaci\xf3n as\xedncrona y puede tener 2 estados: incompleta o completada."),(0,i.kt)("p",null,"Cuando llamamos una funci\xf3n as\xedncrona, nos retorna un estado ",(0,i.kt)("inlineCode",{parentName:"p"},"INCOMPLETO"),", mientras tanto espera a que la funci\xf3n as\xedncrona finalice o lance algun error."),(0,i.kt)("p",null,"Si la operaci\xf3n as\xedncrona es satisfactoria, entonces se completa con un valor, sino se completa con un error."),(0,i.kt)("h3",{id:"async-y-await"},"Async y Await"),(0,i.kt)("p",null,"La palabras reservadas ",(0,i.kt)("inlineCode",{parentName:"p"},"async")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"await")," sirven para definir una funci\xf3n as\xedncrona y para esperar su resultado."),(0,i.kt)("p",null,"Uso de async:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"Future<int> calcularDistanciaAlSol() async {\n  // calcular distancia al sol\n  return 100;\n}\n")),(0,i.kt)("p",null,"Uso de await:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"var distancia = await calcularDistanciaAlSol();\n")),(0,i.kt)("h2",{id:"agregar-paquete-http"},"Agregar paquete http"),(0,i.kt)("p",null,"El paquete ",(0,i.kt)("inlineCode",{parentName:"p"},"http")," provee una forma muy simple para obtener informaci\xf3n de internet. Para instalarlo, lo agregamos en la secci\xf3n de dependencias en el archivo ",(0,i.kt)("inlineCode",{parentName:"p"},"pubspec.yaml"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"En este caso estamos usando la \xfaltima versi\xf3n 0.13.4")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"dependencies:\n  http: ^0.13.4\n")),(0,i.kt)("p",null,"Para hacer uso de este paquete hacemos un ",(0,i.kt)("inlineCode",{parentName:"p"},"import")," en donde sea que lo vayamos a ejecutar."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:http/http.dart' as http;\n")),(0,i.kt)("h2",{id:"crear-clase-user"},"Crear clase User"),(0,i.kt)("p",null,"Crear un archivo llamado ",(0,i.kt)("inlineCode",{parentName:"p"},"user.dart")," y agregar la siguiente clase:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"class User {\n  final int id;\n  final String name;\n  final String username;\n  final String email;\n  final String phone;\n\n  const User({\n    required this.id,\n    required this.name,\n    required this.username,\n    required this.email,\n    required this.phone,\n  });\n\n  factory User.fromJson(Map<String, dynamic> json) {\n    return User(\n      id: json['id'],\n      name: json['name'],\n      username: json['username'],\n      email: json['email'],\n      phone: json['phone'],\n    );\n  }\n}\n")),(0,i.kt)("p",null,"El constructor ",(0,i.kt)("inlineCode",{parentName:"p"},"User.fromJson(Map<String, dynamic> json)")," nos servir\xe1 para crear un instancia de ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," a partir de los datos que vienen de la respuesta del API en formato JSON."),(0,i.kt)("h2",{id:"lista-de-usuarios"},"Lista de usuarios"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Creamos un archivo llamado ",(0,i.kt)("inlineCode",{parentName:"p"},"users_list_widget.dart"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Agregamos el siguiente widget, que contiene un ",(0,i.kt)("inlineCode",{parentName:"p"},"ListView")," y recibe una lista de usuarios para mostrar."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"\nclass UsersList extends StatelessWidget {\n  const UsersList({ Key? key, required this.usuarios });\n\n  final List<User> usuarios;\n\n  @override\n  Widget build(BuildContext context) {\n    return ListView.builder(\n      itemCount: usuarios.length,\n      itemBuilder: (context, index) {\n        return ListTile(\n          title:  Text(usuarios[index].name),\n          subtitle: Text(usuarios[index].email),\n          trailing: Text(usuarios[index].phone),\n        );\n      },\n    );\n  }\n}\n")),(0,i.kt)("h2",{id:"hacer-una-petici\xf3n-http"},"Hacer una petici\xf3n http"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"En este ejercicio vamos a realizar una petici\xf3n de tipo GET al endpoint ",(0,i.kt)("a",{parentName:"p",href:"https://jsonplaceholder.typicode.com/users"},"https://jsonplaceholder.typicode.com/users"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Se crea un m\xe9todo as\xedncrono llamado ",(0,i.kt)("inlineCode",{parentName:"p"},"obtenerUsuarios()")," que nos regresa un ",(0,i.kt)("inlineCode",{parentName:"p"},"Future")," de tipo ",(0,i.kt)("inlineCode",{parentName:"p"},"List<User>"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Este m\xe9todo se agrega en nuestro Widget principal."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"Future<List<User>> obtenerUsuarios() async {\n  final response = await http.get(Uri.parse(\"https://jsonplaceholder.typicode.com/users\"));\n\n  // validar c\xf3digo de estado\n  // 200 es igual a satisfactorio\n  if (response.statusCode == 200) {\n\n    // Se convierte la respuesta a un obteno Json\n    // Luego el objeto Json se convierte a un Map\n    final lista = jsonDecode(response.body).cast<Map<String, dynamic>>();\n\n    // Cada elemento en el Map se convierte en un User\n    return lista.map<User>((item) => User.fromJson(item)).toList();\n\n  } else {\n    throw Exception('Error al obtener lista de usuarios');\n  }\n}\n")),(0,i.kt)("h2",{id:"future-builder"},"Future Builder"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"En el widget principal agregamos una variable llamada ",(0,i.kt)("inlineCode",{parentName:"p"},"usuarios")," de tipo ",(0,i.kt)("inlineCode",{parentName:"p"},"List"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Se sobreescribe la funci\xf3n ",(0,i.kt)("inlineCode",{parentName:"p"},"initState()")," que inicializa el estado y mandamos a llamar ",(0,i.kt)("inlineCode",{parentName:"p"},"obtenerUsuarios()"),"."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"\nlate Future<List<User>> usuarios;\n\n@override\nvoid initState() {\n  super.initState();\n\n  usuarios = obtenerUsuarios();\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Haciendo uso del widget ",(0,i.kt)("inlineCode",{parentName:"li"},"FutureBuilder"),", que es un widget especialmente dise\xf1ado para trabajar con datos de una variable de tipo ",(0,i.kt)("inlineCode",{parentName:"li"},"Future")," validamos si existen datos a trav\xe9s de la propiedad ",(0,i.kt)("inlineCode",{parentName:"li"},"snapshot"),", en caso contrario mostramos una animaci\xf3n que indica que estamos esperando por un resultado.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},'FutureBuilder<List<User>>(\n    future: usuarios,\n    builder: (context, snapshot) {\n      if (snapshot.hasData) {\n        return UsersList(usuarios: snapshot.data!);\n      } else if (snapshot.hasError) {\n        return const Center(\n          child: Text("Ocurri\xf3 un error."),\n        );\n      }\n\n      return Center(\n        child: CircularProgressIndicator(),\n      );\n    }\n),\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Nuestro widget principal deber\xeda quedar de la siguiente forma:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},'class MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n\n  late Future<List<User>> usuarios;\n\n  @override\n  void initState() {\n    super.initState();\n\n    usuarios = obtenerUsuarios();\n  }\n\n  Future<List<User>> obtenerUsuarios() async {\n    final response = await http.get(Uri.parse("https://jsonplaceholder.typicode.com/users"));\n\n    if (response.statusCode == 200) {\n      final lista = jsonDecode(response.body).cast<Map<String, dynamic>>();\n\n      return lista.map<User>((item) => User.fromJson(item)).toList();\n\n    } else {\n      throw Exception(\'Error al obtener lista de usuarios\');\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: FutureBuilder<List<User>>(\n          future: usuarios,\n          builder: (context, snapshot) {\n            if (snapshot.hasData) {\n              return UsersList(usuarios: snapshot.data!);\n            } else if (snapshot.hasError) {\n              return const Center(\n                child: Text("Ocurri\xf3 un error."),\n              );\n            }\n\n            return Center(\n              child: CircularProgressIndicator(),\n            );\n          }\n      ),\n      // This trailing comma makes auto-formatting nicer for build methods.\n    );\n  }\n}\n')),(0,i.kt)("h2",{id:"resultado-final"},"Resultado final"),(0,i.kt)("p",null,"Al final debemos mostrar la informaci\xf3n optenida del API en forma de lista."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Imagen",src:t(97).Z,width:"1080",height:"1920"})),(0,i.kt)("h2",{id:"ejercicio-pr\xe1ctico"},"Ejercicio pr\xe1ctico"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Hacer una llamada al endpoint ",(0,i.kt)("inlineCode",{parentName:"p"},"https://jsonplaceholder.typicode.com/posts")," y mostrar los datos obtenidos en un ListView.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Se deben mostrar las propiedades ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"body"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Se debe crear una clase llamada ",(0,i.kt)("inlineCode",{parentName:"p"},"Post")," que contenga los datos del Json obtenido.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Valor ",(0,i.kt)("inlineCode",{parentName:"p"},"5pts")))))}d.isMDXComponent=!0},97:function(e,n,t){n.Z=t.p+"assets/images/screen-http-9edabff5a9561f78af0364aea500aa7c.png"}}]);