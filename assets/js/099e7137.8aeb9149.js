"use strict";(self.webpackChunkuniversity_docs=self.webpackChunkuniversity_docs||[]).push([[24],{3905:function(e,a,n){n.d(a,{Zo:function(){return d},kt:function(){return m}});var t=n(7294);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=t.createContext({}),u=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},d=function(e){var a=u(e.components);return t.createElement(s.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},p=t.forwardRef((function(e,a){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=i,g=p["".concat(s,".").concat(m)]||p[m]||c[m]||r;return n?t.createElement(g,o(o({ref:a},d),{},{components:n})):t.createElement(g,o({ref:a},d))}));function m(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=p;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2962:function(e,a,n){n.r(a),n.d(a,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return d},default:function(){return p}});var t=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={id:"android9",title:"Ciclo de vida"},s=void 0,u={unversionedId:"android/android9",id:"android/android9",title:"Ciclo de vida",description:"Cada actividad y fragmento tiene su propio ciclo de vida, es decir diferentes estados por los que puede pasar. Desde que una vista es creada por primera vez hasta que es destruida y liberada de la memoria del sistema.",source:"@site/docs/android/android9.md",sourceDirName:"android",slug:"/android/android9",permalink:"/cursos/docs/android/android9",tags:[],version:"current",frontMatter:{id:"android9",title:"Ciclo de vida"},sidebar:"androidSidebar",previous:{title:"Fragmentos",permalink:"/cursos/docs/android/android8"},next:{title:"Interactividad",permalink:"/cursos/docs/android/android10"}},d=[{value:"Clase: Log",id:"clase-log",children:[],level:2},{value:"onCreate",id:"oncreate",children:[],level:2},{value:"onStart",id:"onstart",children:[],level:2},{value:"onResume",id:"onresume",children:[],level:2},{value:"onPause",id:"onpause",children:[],level:2},{value:"onStop",id:"onstop",children:[],level:2},{value:"onDestroy",id:"ondestroy",children:[],level:2}],c={toc:d};function p(e){var a=e.components,l=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,t.Z)({},c,l,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Cada actividad y fragmento tiene su propio ciclo de vida, es decir diferentes estados por los que puede pasar. Desde que una vista es creada por primera vez hasta que es destruida y liberada de la memoria del sistema."),(0,r.kt)("p",null,"Cada vez que el usuario abre la app, navega entre actividades, con diferentes fragmentos e incluso sale de la app, las actividades cambian de estado. El siguiente diagrama nos muestra los diferentes estados del ciclo de vida de un activity:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image",src:n(7678).Z,width:"287",height:"334"})),(0,r.kt)("p",null,"En algunas ocasiones necesitamos cambiar algunos comportamientos o ejecutar alg\xfan c\xf3digo cuando el estado cambia. Es por eso que la clase ",(0,r.kt)("inlineCode",{parentName:"p"},"Activity")," y cualquier subclase de ",(0,r.kt)("inlineCode",{parentName:"p"},"Activity")," implementan una serie de funciones relacionadas al ciclo de vida. El sistema invoca estas funciones cada vez que una activity cambia de un estado a otro, y podemos sobreescribir estas funciones en nuestras actividades cuando necesitemos ejecutar tareas en cada cambio de estado. El siguiente diagrama nos muestra las funciones relacionadas a cada uno de los estados en el ciclo de vida:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image",src:n(9123).Z,width:"276",height:"314"})),(0,r.kt)("p",null,"Los fragmentos tambi\xe9n tienen un ciclo de vida, muy similar al de las actividades. El siguiente diagrama nos muestra el ciclo de vida de un fragmento:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image",src:n(5529).Z,width:"285",height:"310"})),(0,r.kt)("h2",{id:"clase-log"},"Clase: Log"),(0,r.kt)("p",null,"La clase ",(0,r.kt)("inlineCode",{parentName:"p"},"Log")," escribe mensajes en el Logcat. La ventana Logcat se encarga de desplegar mensajes (logs) en tiempo de ejecuci\xf3n sobre los procesos que ocurren en nuestra app y mantiene un historial de los mismos. Tambi\xe9n muestra mensajes que nosotros agreguemos en nuestro c\xf3digo."),(0,r.kt)("p",null,"En la clase ",(0,r.kt)("inlineCode",{parentName:"p"},"Log")," tenemos 3 puntos a tomar en cuenta:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"La importancia del mensaje.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Log.i()"),": escribe un mensaje informativo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Log.e()"),": escribe un mensaje de error."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Log.w()"),": escribe un mensaje de advertencia.")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"La etiqueta: es una cadena de texto que nos permite buscar nuestros mensajes m\xe1s facilmente en el logcat. Generalmente se indica el nombre de la clase desde donde se ejecuta.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"El mensaje: es una cadena que indica lo que queremos enviar al logcat."))),(0,r.kt)("h2",{id:"oncreate"},"onCreate"),(0,r.kt)("p",null,"La funci\xf3n se ejecuta una sola vez, cuando la actividad es inicializada (cuando el objeto es creado en memoria)."),(0,r.kt)("p",null,'Despu\xe9s de ejecutar esta funci\xf3n la actividad se considera "creada". Dentro de esta funci\xf3n podemos inflar el layout, definir click listeners y configurar el data binding.'),(0,r.kt)("p",null,"Vamos a localizar la funci\xf3n onCreate en la clase MainActivity. Luego de la linea ",(0,r.kt)("inlineCode",{parentName:"p"},"super.onCreate()"),", agregamos la siguiente linea de c\xf3digo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'Log.i("MainActivity", "Se ejecuta onCreate...")\n')),(0,r.kt)("h2",{id:"onstart"},"onStart"),(0,r.kt)("p",null,"Esta funci\xf3n se llama despu\xe9s de ",(0,r.kt)("inlineCode",{parentName:"p"},"onCreate()")," y luego que se llama la actividad es visible en la pantalla. A diferencia de ",(0,r.kt)("inlineCode",{parentName:"p"},"onCreate()")," que solo se llama una vez al inicializar, ",(0,r.kt)("inlineCode",{parentName:"p"},"onStart()")," se llama muchas veces en el ciclo de vida de tu actividad."),(0,r.kt)("p",null,"La funci\xf3n se agrega a nuestra clase de la siguiente forma:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"override fun onStart() {\n    super.onStart()\n}\n")),(0,r.kt)("p",null,"Luego agregamos dentro la siguiente linea:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'Log.i("MainActivity", "Se ejecuta onStart...")\n')),(0,r.kt)("h2",{id:"onresume"},"onResume"),(0,r.kt)("p",null,"La funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"onResume()")," se ejecuta despu\xe9s de ",(0,r.kt)("inlineCode",{parentName:"p"},"onStart()")," cuando la actividad est\xe1 en primer plano y el usuario puede interacturar con la app."),(0,r.kt)("p",null,"Agregamos la siguiente funci\xf3n en nuestra clase:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'override fun onResume() {\n    super.onResume()\n\n    Log.i("MainActivity", "Se ejecuta onResume...")\n}\n')),(0,r.kt)("h2",{id:"onpause"},"onPause"),(0,r.kt)("p",null,"La funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"onPause()")," se ejecuta cuando el usuario deja de interactuar con la actividad (ya no est\xe1 en primer plano). Generalmente se da cuando hay alguna interrupci\xf3n como una llamada telef\xf3nica, usamos esta funci\xf3n para pausar alg\xfan proceso."),(0,r.kt)("p",null,"Agregamos la funci\xf3n a nuestra clase:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'override fun onPause() {\n    super.onPause()\n\n    Log.i("MainActivity", "Se ejecuta onPause...")\n}\n')),(0,r.kt)("h2",{id:"onstop"},"onStop"),(0,r.kt)("p",null,"Se ejecuta cuando la actividad ya no es visible para el usuario. Ocurre por ejemplo cuando navega hacia otra actividad que cubre toda la pantalla. Dentro de esta funci\xf3n podemos parar cualquier funcionalidad que no necesitamos mientras la actividad no est\xe9 visible por ejemplo las animaciones ahorrando recursos para el sistema."),(0,r.kt)("p",null,"Agregamos la funci\xf3n a nuestra clase:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'override fun onStop() {\n    super.onStop()\n\n    Log.i("MainActivity", "Se ejecuta onStop...")\n}\n')),(0,r.kt)("h2",{id:"ondestroy"},"onDestroy"),(0,r.kt)("p",null,"Se ejecuta cuando una actividad es destruida completamente, por ejemplo:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Al cerrar una actividad navegando hacia atr\xe1s.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"El sistema la destruye temporalmente debido a la rotaci\xf3n de la pantalla.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Cuando matamos la App."))),(0,r.kt)("p",null,"Agregamos la siguiente funci\xf3n a nuestra clase:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'override fun onDestroy() {\n    super.onDestroy()\n\n    Log.i("MainActivity", "Se ejecuta onDestroy...")\n}\n')))}p.isMDXComponent=!0},7678:function(e,a,n){a.Z=n.p+"assets/images/53-b8a07be5e9144a4afc886d3b573b3483.png"},9123:function(e,a,n){a.Z=n.p+"assets/images/54-5ea237849047e2350ef85603a33f669e.png"},5529:function(e,a,n){a.Z=n.p+"assets/images/55-973464d3f5873d5898489a885e65f198.png"}}]);