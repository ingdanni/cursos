"use strict";(self.webpackChunkuniversity_docs=self.webpackChunkuniversity_docs||[]).push([[3944],{3905:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return u}});var a=r(7294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var s=a.createContext({}),p=function(e){var n=a.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(r),u=t,g=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return r?a.createElement(g,i(i({ref:n},c),{},{components:r})):a.createElement(g,i({ref:n},c))}));function u(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:t,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},197:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var a=r(7462),t=r(3366),o=(r(7294),r(3905)),i=["components"],l={id:"android14",title:"Navegaci\xf3n - Parte 4"},s=void 0,p={unversionedId:"android/android14",id:"android/android14",title:"Navegaci\xf3n - Parte 4",description:"Par\xe1metros entre Fragments",source:"@site/docs/android/android14.md",sourceDirName:"android",slug:"/android/android14",permalink:"/cursos/docs/android/android14",tags:[],version:"current",frontMatter:{id:"android14",title:"Navegaci\xf3n - Parte 4"},sidebar:"androidSidebar",previous:{title:"Navegaci\xf3n - Parte 3",permalink:"/cursos/docs/android/android13"},next:{title:"Navegaci\xf3n - Tarea",permalink:"/cursos/docs/android/android15"}},c=[{value:"Par\xe1metros entre Fragments",id:"par\xe1metros-entre-fragments",children:[{value:"Safe Args Plugin",id:"safe-args-plugin",children:[],level:3},{value:"Configurar Plugin",id:"configurar-plugin",children:[],level:3},{value:"Clases NavDirection",id:"clases-navdirection",children:[],level:3},{value:"Configurar par\xe1metro",id:"configurar-par\xe1metro",children:[],level:3},{value:"Implementaci\xf3n",id:"implementaci\xf3n",children:[],level:3},{value:"Agregar mensaje de error",id:"agregar-mensaje-de-error",children:[],level:3},{value:"Recuperar par\xe1metros enviados",id:"recuperar-par\xe1metros-enviados",children:[],level:3}],level:2}],d={toc:c};function m(e){var n=e.components,r=(0,t.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"par\xe1metros-entre-fragments"},"Par\xe1metros entre Fragments"),(0,o.kt)("h3",{id:"safe-args-plugin"},"Safe Args Plugin"),(0,o.kt)("p",null,"Para pasar par\xe1metros entre fragmentos agregamos el plugin ",(0,o.kt)("inlineCode",{parentName:"p"},"Safe Args"),". Adem\xe1s del paso de valores, este plugin nos puede ayudar a evitar algunos errores que podri\xe1n darse durante la navegaci\xf3n, como por ejemplo:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Discrepancia entre tipos de datos:")," por ejemplo si el ",(0,o.kt)("inlineCode",{parentName:"p"},"Fragmento A")," envia un String pero el ",(0,o.kt)("inlineCode",{parentName:"p"},"Fragmento B")," espera un ",(0,o.kt)("inlineCode",{parentName:"p"},"Int"),", la App nos marcaria un error en tiempo de ejecuci\xf3n (crash).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Error en el nombre del par\xe1metro:")," por ejemplo si el ",(0,o.kt)("inlineCode",{parentName:"p"},"Fragmento B")," requiere un par\xe1metro con un nombre que el ",(0,o.kt)("inlineCode",{parentName:"p"},"Fragment A")," no ha enviado, entonces la app nos marcar\xeda un error en tiempo de ejecuci\xf3n."))),(0,o.kt)("p",null,"Para evitar estos problemas y capturar los errores en tiempo de compilaci\xf3n usaremos el plugin ",(0,o.kt)("strong",{parentName:"p"},"Safe Args")," que genera c\xf3digo y clases que ayudan a detectar errores en tiempo de compilaci\xf3n que de otro modo podr\xedan pasar por alto hasta que se ejecute la app."),(0,o.kt)("h3",{id:"configurar-plugin"},"Configurar Plugin"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"En nuestro archivo gradle del proyecto ",(0,o.kt)("em",{parentName:"li"},"(build.gradle: project)")," en la parte superior agregamos las siguiente lineas:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'buildscript {\n    ...\n\n    repositories {\n        google()\n    }\n\n    dependencies {\n        classpath("androidx.navigation:navigation-safe-args-gradle-plugin:$navigationVersion")\n    }\n}\n')),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"En nuestro archivo gradle de la app ",(0,o.kt)("em",{parentName:"li"},"(build.gradle: module)"),", luego de la secci\xf3n ",(0,o.kt)("inlineCode",{parentName:"li"},"plugins")," agregamos la siguiente linea:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"id 'androidx.navigation.safeargs.kotlin'\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Hacemos ",(0,o.kt)("inlineCode",{parentName:"li"},"Sync")," en los archivos Gradle y en el caso que nos pida instalar algo lo hacemos.")),(0,o.kt)("h3",{id:"clases-navdirection"},"Clases NavDirection"),(0,o.kt)("p",null,"El plugin ",(0,o.kt)("em",{parentName:"p"},"Safe Args")," nos va a generar clases ",(0,o.kt)("inlineCode",{parentName:"p"},"NavDirection")," para cada fragmento. Estas clases repesentan la navegaci\xf3n para todas las ",(0,o.kt)("strong",{parentName:"p"},"actions")," en la aplicaci\xf3n. Por ejemplo para un fragmento ",(0,o.kt)("inlineCode",{parentName:"p"},"RegistrationFragment")," se genera una clase ",(0,o.kt)("inlineCode",{parentName:"p"},"RegistrationFragmentDirections"),", esto nos permite tener un tipado seguro en los par\xe1metros entre los fragmentos."),(0,o.kt)("h3",{id:"configurar-par\xe1metro"},"Configurar par\xe1metro"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"En la vista de dise\xf1o del Navigation Graph seleccionamos el fragmento ",(0,o.kt)("inlineCode",{parentName:"p"},"VerifyFragment"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"En el panel de atributos buscamos la secci\xf3n Argumentos (Arguments) y presionamos el bot\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"+"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Nos aparece una ventana donde podemos configurar el param\xe9tro que necesitemos. En nuestro caso se llamar\xe1 ",(0,o.kt)("inlineCode",{parentName:"p"},"carnet")," y ser\xe1 de tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"String"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Repetimos el proceso anterior para definir un param\xe9tro llamado ",(0,o.kt)("inlineCode",{parentName:"p"},"phone")," de tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"String"),"."))),(0,o.kt)("h3",{id:"implementaci\xf3n"},"Implementaci\xf3n"),(0,o.kt)("p",null,'Dentro del Click Listener definido para el bot\xf3n "Verificar" borramos el c\xf3digo existente y agregamos:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Obtenemos los valores de carnet y phone\nval carnet = carnetEditText.text.toString()\nval phone = phoneEditText.text.toString()\n\n// Validamos los datos no esten vacios y tengan longitudes correctas.\nif (phone.isEmpty() || carnet.isEmpty() || phone.length != 8 || carnet.length != 6) {\n    showErrorMessage()\n} else {\n    // Invocamos la clase Nav Direction con la acci\xf3n correspondiente.\n    val action = RegistrationFragmentDirections.actionRegistrationFragmentToVerifyFragment(carnet = carnet, phone = phone);\n\n    // Navegamos a la acci\xf3n.\n    it.findNavController().navigate(action)\n}\n")),(0,o.kt)("h3",{id:"agregar-mensaje-de-error"},"Agregar mensaje de error"),(0,o.kt)("p",null,"Agregaremos un m\xe9todo llamado ",(0,o.kt)("inlineCode",{parentName:"p"},"showErrorMessage")," para mostrar el mensaje al usuario, indicandole el error a trav\xe9s del componente ",(0,o.kt)("inlineCode",{parentName:"p"},"AlertDialog"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun showErrorMessage() {\n    val dialog = AlertDialog.Builder(this.context)\n\n    dialog.setTitle("Error")\n    dialog.setMessage("Ingrese los datos solicitados. El tel\xe9fono debe contener 8 caracteres y el carn\xe9 6 caracteres.")\n    dialog.setNeutralButton("OK") { dialogInterface, which ->\n        // Nada por hacer...\n    }\n\n    dialog.show()\n}\n')),(0,o.kt)("h3",{id:"recuperar-par\xe1metros-enviados"},"Recuperar par\xe1metros enviados"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"En la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"VerifyFragment")," vamos a utilizar los par\xe1metros que se enviaron desde ",(0,o.kt)("inlineCode",{parentName:"p"},"RegistrationFragment"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"En el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"onViewCreated")," recuperamos el par\xe1metro a trav\xe9s de ",(0,o.kt)("inlineCode",{parentName:"p"},"VerifyFragmentArgs"),":"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// Las clases "FragmentArgs" son autogeneradas para cada fragmento y contienen los par\xe1metros enviados\nvar arguments = VerifyFragmentArgs.fromBundle(requireArguments())\n\ntitleTextView.text = "Se ha enviado un c\xf3digo de acceso al tel\xe9fono: ${arguments.phone}"\n')))}m.isMDXComponent=!0}}]);